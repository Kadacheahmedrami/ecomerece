generator client {
  provider = "prisma-client-js"
  // Add these for better performance
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Add connection pooling settings

}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  images      String[]
  category    String
  stock       Int      @default(0)
  visible     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]

  // Add indexes for better performance
  @@index([category])
  @@index([visible])
  @@index([createdAt])
}

model Order {
  id            String       @id @default(cuid())
  customerName  String
  customerEmail String
  city          String       // Algerian city
  phone         String
  deliveryType  DeliveryType @default(HOME_DELIVERY)
  status        OrderStatus  @default(PENDING)
  quantity      Int          // Quantity of product ordered
  productId     String
  product       Product      @relation(fields: [productId], references: [id])
  productPrice  Float        // Price of product at time of order
  deliveryFee   Float        // Fee based on selected city
  total         Float        // (productPrice * quantity) + deliveryFee
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Add indexes for better performance
  @@index([status])
  @@index([createdAt])
  @@index([productId])
}

model City {
  id          String @id @default(cuid())
  name        String @unique
  deliveryFee Float

  @@index([name])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DeliveryType {
  HOME_DELIVERY
  LOCAL_AGENCY_PICKUP
}